" Pathogen or Vundle (deafult is Vundle) {{{

" Comment-out if you want to use pahogen
" execute pathogen#infect()
" com! -nargs=+ Bundle

" man.vim: invoked by :Man {name}
source $VIMRUNTIME/ftplugin/man.vim

" let Vundle manage Vundle, required
" ---------------------------------------------------
Plugin 'gmarik/Vundle.vim'

"}}}

" general plugins {{{

" ex-config:
" ---------------------------------------------------
Plugin 'hangeng/ex-config'
nnoremap <unique> <leader>ve :call exconfig#edit_cur_vimentry ()<CR>

" ex-utility:
" ---------------------------------------------------
Plugin 'exvim/ex-utility'

nnoremap <unique> <silent> <Leader>bd :EXbd<CR>
"nnoremap <unique> <silent> <C-l> :EXbn<CR>
"nnoremap <unique> <silent> <C-h> :EXbp<CR>
"nnoremap <unique> <silent> <C-Tab> :EXbalt<CR>
nnoremap <unique> <silent> <Leader><Tab> :EXsw<CR>
nmap <unique> <silent> <Leader><Esc> :EXgp<CR><ESC>

" ex-aftercolor
" ---------------------------------------------------
Plugin 'exvim/ex-aftercolors'

" ex-vimentry
" ---------------------------------------------------
Plugin 'hangeng/ex-vimentry'

" ex-project
" ---------------------------------------------------
Plugin 'exvim/ex-project'

" ex-gsearch
" ---------------------------------------------------
Plugin 'hangeng/ex-gsearch'

call exgsearch#register_hotkey( 100, 0, '<leader>gs', ":EXGSearchToggle<CR>", 'Toggle global search window.' )
call exgsearch#register_hotkey( 101, 0, '<leader>gg', ":EXGSearchCWord<CR>", 'Search current word.' )
call exgsearch#register_hotkey( 102, 0, '<leader><S-f>', ":GS ", 'Shortcut for :GS' )

" ex-tagselect
" ---------------------------------------------------
Plugin 'hangeng/ex-tags'


" ex-symbol
" ---------------------------------------------------
Plugin 'exvim/ex-symbol'
call exsymbol#register_hotkey( 101, 0, '<leader>sq', ":EXSymbolOpen<CR>", 'Open symbols window.' )
call exsymbol#register_hotkey( 102, 0, '<leader>sg', ":EXSymbolCWord<CR>", 'List symbols contains current word.' )
let g:ex_symbol_select_cmd = 'TS'

" ex-cscope
" ---------------------------------------------------
Plugin 'hangeng/ex-cscope'
call excscope#register_hotkey( 100, 0, '<leader>cs', ":EXCSToggle<CR>", 'Toggle cscope window.' )
nnoremap <unique> <silent> <Leader>cc :CSCD<CR>

" ex-qfix
" ---------------------------------------------------
Plugin 'exvim/ex-qfix'
call exqfix#register_hotkey( 100, 0, '<leader>qf', ":EXQFixToggle<CR>", 'Toggle quickfix window.' )
call exqfix#register_hotkey( 101, 0, '<leader>qq', ":EXQFixPaste<CR>", 'Open quickfix window and paste error list from register *.' )

" ex-hierarchy
" ---------------------------------------------------
Plugin 'exvim/ex-hierarchy'
nnoremap <unique> <leader>hv :EXHierarchyCWord<CR>

" ex-taglist: invoke by <F4>
" ---------------------------------------------------
Plugin 'exvim/ex-taglist'
nnoremap <unique> <silent> <C-l> :TlistToggle<CR>
let Tlist_Show_One_File = 1 " Displaying tags for only one file~
let Tlist_Exist_OnlyWindow = 1 " if you are the last, kill yourself
let Tlist_Use_Right_Window = 1 " split to the right side of the screen
let Tlist_Sort_Type = "order" " sort by order or name
let Tlist_Display_Prototype = 0 " do not show prototypes and not tags in the taglist window.
let Tlist_Compart_Format = 1 " Remove extra information and blank lines from the taglist window.
let Tlist_GainFocus_On_ToggleOpen = 1 " Jump to taglist window on open.
let Tlist_Display_Tag_Scope = 1 " Show tag scope next to the tag name.
let Tlist_Close_On_Select = 0 " Close the taglist window when a file or tag is selected.
let Tlist_BackToEditBuffer = 0 " If no close on select, let the user choose back to edit buffer or not
let Tlist_Enable_Fold_Column = 0 " Don't Show the fold indicator column in the taglist window.
let Tlist_WinWidth = 40
let Tlist_Compact_Format = 1 " do not show help
" add javascript language
let tlist_javascript_settings = 'javascript;v:global variable:0:0;c:class;p:property;m:method;f:function;r:object'
" add hlsl shader language
let tlist_hlsl_settings = 'c;d:macro;g:enum;s:struct;u:union;t:typedef;v:variable;f:function'
" add actionscript language
let tlist_actionscript_settings = 'actionscript;c:class;f:method;p:property;v:variable'


" ---------------------------------------------------
" ex-showmarks: invoke by m... or <leader>mm, <leader>ma
" ---------------------------------------------------
Plugin 'exvim/ex-showmarks'
" TODO: bootleq/ShowMarks on github is well organized in code, but have lots
" bugs, consider merge his code and fixes the bugs
let g:showmarks_enable = 1
let g:showmarks_include = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
let g:showmarks_ignore_type = 'hqm' " Ignore help, quickfix, non-modifiable buffers
" Hilight lower & upper marks
let g:showmarks_hlline_lower = 1
let g:showmarks_hlline_upper = 0

" ex-visincr: invoke when select text and type ':II'
" ---------------------------------------------------
Plugin 'exvim/ex-visincr'

" ex-matchit: invoke by %
" ---------------------------------------------------
Plugin 'exvim/ex-matchit'

" ex-easyhl:
" ---------------------------------------------------
Plugin 'exvim/ex-easyhl'

" searchcompl: invoke by /
" ---------------------------------------------------
Plugin 'exvim/ex-searchcompl'

" ex-colorschemes
" ---------------------------------------------------
Plugin 'exvim/ex-colorschemes'

" vim-color-solarized
" ---------------------------------------------------
"Plugin 'altercation/vim-colors-solarized'

" vim-color-gruvbox
" ---------------------------------------------------
Plugin 'morhetz/gruvbox'

" vim-fugitive: invoke most by :Gdiff
" ---------------------------------------------------
Plugin 'tpope/vim-fugitive'

" vim-surround: invoke when you select words and press 's'
" ---------------------------------------------------
Plugin 'tpope/vim-surround'

xmap s <Plug>VSurround

" DISABLE
" " Plugin 'tpope/vim-dispatch'
" " ---------------------------------------------------

" nerdtree: invoke by :NERDTreeToggle
" ---------------------------------------------------
Plugin 'scrooloose/nerdtree'

let g:NERDTreeWinSize = 30
let g:NERDTreeMouseMode = 1
let g:NERDTreeMapToggleZoom = '<Space>'

" nerdcommenter: invoke by <leader>c<space>, <leader>cl, <leader>cu, <F11> or <C-F11>
" ---------------------------------------------------
Plugin 'hangeng/nerdcommenter'

let g:NERDSpaceDelims = 1
let g:NERDRemoveExtraSpaces = 1
let g:NERDCustomDelimiters = {
            \ 'vimentry': { 'left': '--' },
            \ }
map <unique> <F11> <Plug>NERDCommenterAlignBoth
map <unique> <C-F11> <Plug>NERDCommenterUncomment

" syntastic: invoke when you save file and have syntac-checker
" ---------------------------------------------------
Plugin 'scrooloose/syntastic'

" this will make html file by Angular.js ignore errors
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
let g:syntastic_always_populate_loc_list = 0                                    
let g:syntastic_auto_loc_list = 0 


" DISABLE: use ex-autocomplpop instead
" YouCompleteMe
"------------------------------------
"Plugin 'Valloric/YouCompleteMe'
"let g:ycm_show_diagnostics_ui = 1
"let g:ycm_enable_diagnostic_signs = 1
"let g:ycm_enable_diagnostic_highlighting = 1
"let g:ycm_echo_current_diagnostic = 0
"let g:ycm_autoclose_preview_window_after_completion = 1
"let g:ycm_collect_identifiers_from_tags_files = 1
"let g:ycm_add_preview_to_completeopt = 1
"let g:ycm_open_loclist_on_ycm_diags = 1
"let g:ycm_always_populate_location_list = 1
"let g:ycm_confirm_extra_conf = 0
""let g:ycm_seed_identifiers_with_syntax = 1

"nnoremap <leader>tf :KangarooPush<CR> :YcmCompleter GoTo<CR> :KangarooPush<CR>
"nnoremap <leader>td :YcmCompleter GoToDefinition<CR>
"nnoremap <leader>tt :YcmCompleter GoToDeclaration<CR>
"" nnoremap <leader>tt :YcmCompleter GetType<CR>
"nnoremap <leader>tc :YcmCompleter GetDoc<CR>
"nnoremap <leader>tb <C-O>
""nnoremap <unique> <silent> <Leader>cs :ExcsSelectToggle<CR>
"set completeopt=menu
"------------------------------------

" undotree: invoke by <Leader>u
" ---------------------------------------------------
Plugin 'mbbill/undotree'

nnoremap <leader>u :UndotreeToggle<CR>
let g:undotree_SetFocusWhenToggle=1
let g:undotree_WindowLayout = 4

" NOTE: this will prevent undotree closed then jump to minibufexpl
function! g:CloseUndotree()
    call UndotreeHide()
    call ex#window#goto_edit_window()
endfunction

function g:Undotree_CustomMap()
    if has('gui_running')
        nnoremap <silent> <script> <buffer> <ESC> :call g:CloseUndotree()<CR>
    else
        nnoremap <silent> <script> <buffer> <leader><ESC> :call g:CloseUndotree()<CR>
    endif
endfunction

" tabular: invoke by <leader>= alignment-character
" ---------------------------------------------------
Plugin 'godlygeek/tabular'

nnoremap <silent> <leader>= :call g:Tabular(1)<CR>
xnoremap <silent> <leader>= :call g:Tabular(0)<CR>
function! g:Tabular(ignore_range) range
    let c = getchar()
    let c = nr2char(c)
    if a:ignore_range == 0
        exec printf('%d,%dTabularize /%s', a:firstline, a:lastline, c)
    else
        exec printf('Tabularize /%s', c)
    endif
endfunction

" vim-easymotion: invoke by <leader><leader> w,b,e,ge,f,F,h,i,j,k,/
" ---------------------------------------------------
Plugin 'Lokaltog/vim-easymotion'

map <leader><leader>/ <Plug>(easymotion-sn)
omap <leader><leader>/ <Plug>(easymotion-tn)
map <leader><leader>j <Plug>(easymotion-j)
map <leader><leader>k <Plug>(easymotion-k)
map <leader><leader>l <Plug>(easymotion-lineforward)
map <leader><leader>h <Plug>(easymotion-linebackward)
nmap s <Plug>(easymotion-s2)

let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
let g:EasyMotion_smartcase = 1
let g:EasyMotion_do_mapping = 0 " Disable default mappings


" LargeFile
" ---------------------------------------------------
Plugin 'vim-scripts/LargeFile'
let g:LargeFile= 5 " files >= 5MB will use LargeFile rules

"}}}

" DISABLE: I'm using GistBox https://app.gistboxapp.com/ instead
" " gist-vim: Invoke by :Gist
" ---------------------------------------------------
" Plugin 'mattn/webapi-vim'
" Plugin 'mattn/gist-vim'

" c-lang {{{

" ex-cref: invoke by <leader>cr
" ---------------------------------------------------
Plugin 'exvim/ex-cref'

" this is modified for default c syntax highlight settings
" make it don't highlight error pattern
let c_gnu = 1
let c_no_curly_error = 1
let c_no_bracket_error = 1

"}}}

" web {{{

"Plugin 'ntpeters/vim-better-whitespace'
"nnoremap <unique> <leader>w :StripWhitespace<CR>

" ex-typescript
" ---------------------------------------------------
Plugin 'exvim/ex-typescript'

" emmet-vim
" ---------------------------------------------------
Plugin 'mattn/emmet-vim'

" make sure emmet only enable in html,css files
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall

" vim-indent-guides: invoke by <leader>ig
" ---------------------------------------------------
Plugin 'nathanaelkane/vim-indent-guides'

let g:indent_guides_guide_size = 1

" vim-javascript
" ---------------------------------------------------
"Plugin 'pangloss/vim-javascript'

" vim-coffee-script
" ---------------------------------------------------
Plugin 'kchmck/vim-coffee-script'

" vim-html
" ---------------------------------------------------
Plugin 'exvim/ex-indenthtml.vim'


" DISABLE: Slow to open big css file
" vim-css-color
" ---------------------------------------------------
" Plugin 'skammer/vim-css-color'

" vim-css3-syntax
Plugin 'hail2u/vim-css3-syntax'

" vim-jade
Plugin 'digitaltoad/vim-jade'

" vim-less
" ---------------------------------------------------
Plugin 'groenewege/vim-less'

" vim-stylus
" ---------------------------------------------------
Plugin 'wavded/vim-stylus'

" vim-markdown
" ---------------------------------------------------
Plugin 'plasticboy/vim-markdown'
let g:vim_markdown_folding_level = 6
let g:vim_markdown_toc_autofit = 1
let g:vim_markdown_folding_style_pythonic = 1
" close the TOC window after stroke enter
" nnoremap <expr><enter> &ft=="qf" ? "<cr>:lcl<cr>" : (getpos(".")[2]==1 ? "i<cr><esc>": "i<cr><esc>l")

