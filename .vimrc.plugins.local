" This file will be loaded after .vimrc.plugins, 
" but before 'filetype plugin on', 'filetype indent on' and 'syntax on' been executed. 
" This file is designed to be safe to add your own plugins and plugins' configuration.

" Add your customized plugins:
" Example: Plugin 'foo/bar/foobar'

" ---------------------------------------------------
" junegunn/fzf
" ---------------------------------------------------
"Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'
nnoremap <C-P> :Files<CR>
nnoremap <C-x> :Buffers<CR>
nnoremap <leader>ss :pwd<CR> :Tags<CR>
set rtp+=/usr/local/opt/fzf


" ---------------------------------------------------
" vasconcelloslf/vim-interestingwords
" ---------------------------------------------------
Plugin 'vasconcelloslf/vim-interestingwords'

" ---------------------------------------------------
" mileszs/ack.vim
" ---------------------------------------------------
Plugin 'mileszs/ack.vim'
if executable('ag')
      let g:ackprg = 'ag --vimgrep'
endif


" ---------------------------------------------------
" mileszs/ack.vim
" ---------------------------------------------------
Plugin 'hangeng/vim-kangaroo'
nnoremap <Space> za


" ---------------------------------------------------
" neoclide/coc.nvim
" ---------------------------------------------------
Plugin 'neoclide/coc.nvim'

" if hidden not set, TextEdit might fail.
set hidden

" Better display for messages
set cmdheight=20

" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> for trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> for confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"


" Use K for show documentation in preview window
" nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
" autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
vmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
vmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use `:Format` for format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` for fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)


" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>


""""""""""""key maps for goto""""""""""""""""""""""""""""
"--------------------------------
" hangeng/ex-tags
"--------------------------------
call extags#register_hotkey( 100, 0, '<leader>ts', ":EXTagsToggle<CR>", 'Toggle tag select window.' )
call extags#register_hotkey( 101, 0, '<leader>tg', ":EXTagsCWord<CR>", 'go to the definition' )

"--------------------------------
" Gtags
"--------------------------------
let Gtags_Auto_Map = 0
let Gtags_Auto_Update = 1
let Gtags_No_Auto_Jump = 0
let Gtags_Close_When_Single = 1
let Gtags_OpenQuickfixWindow = 0
:nmap <silent> <leader>gd :GtagsCursor<CR>

"--------------------------------
" coc (ccls)
"--------------------------------
nmap <silent> <C-n> <Plug>(coc-definition)
nmap <silent> <C-k> <Plug>(coc-diagnostic-prev)
nmap <silent> <C-j> <Plug>(coc-diagnostic-next)

"<Plug>(coc-definition)
"<Plug>(coc-declaration)
"<Plug>(coc-implementation)
"<Plug>(coc-type-definition)
"<Plug>(coc-references)


